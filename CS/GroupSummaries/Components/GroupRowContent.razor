@using GroupSummaries.Models
@inject IJSRuntime JS
@inject StateService stateService

<table class="summaryTable">
    <tbody>
    <tr class="groupRow">
        <td colspan="@groupRowColumnSpan">@Context.DisplayText</td>
    </tr>
    <tr class="summaryRow">
        @{
            var counter = groupLevel + 1;
        }
        @for (int i = 0; i < indentCount; i++) {
            <td class="@("summaryCell_" + counter)"></td>
            counter++;
        }
        @foreach (var column in Grid.GetVisibleColumns()) {
            var text = "";
            if (column is DxGridDataColumn dataColumn) {
                if (dataColumn != null) {
                    var summaryItem = Grid.GetGroupSummaryItems().FirstOrDefault(g => g.FieldName == dataColumn.FieldName);
                    if (summaryItem != null) {
                        text = Grid.GetGroupSummaryLabel(summaryItem, Context.VisibleIndex) + ": " + Grid.GetGroupSummaryFormattedValue(summaryItem, Context.VisibleIndex);
                    }
                }
            }

            <td class="@("summaryCell_" + counter)" style="font-weight: bold">@text</td>
            counter++;
        }
    </tr>
    </tbody>
</table>

@code {
    string dislayText;
    int groupRowColumnSpan;
    int indentCount;
    int groupLevel;

    [CascadingParameter] public DxGrid Grid { get; set; }

    [Parameter] public GridDataColumnGroupRowTemplateContext Context { get; set; }

    protected override void OnParametersSet() {
        groupLevel = Grid.GetRowLevel(Context.VisibleIndex);
        indentCount = Grid.GetGroupCount() - groupLevel - 1;
        groupRowColumnSpan = Grid.GetVisibleColumns().Count + indentCount;
        base.OnParametersSet();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (stateService.GridLayoutChanged) {
            stateService.GridLayoutChanged = false;
            await JS.InvokeVoidAsync("AdjustSummaryTable");
        }
    }

}