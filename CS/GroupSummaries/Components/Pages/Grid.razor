@page "/grid"

@using GroupSummaries.Models
@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject OrderService orderService
@inject StateService stateService
@inject IJSRuntime JS

<style>
    td:has(> table.summaryTable) {
        padding:  0 !important;
    }
</style>

<DxGrid Data="@orders" CssClass="myGrid"
        KeyFieldName="OrderID" ShowGroupPanel="true" LayoutAutoSaving="OnLayoutAutoSaving"
        GroupFooterDisplayMode="GridGroupFooterDisplayMode.Never" ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
        EditMode="GridEditMode.EditRow">
    <Columns>
        <DxGridCommandColumn />
        <DxGridDataColumn FieldName="OrderID" ReadOnly="true">
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="ProductName">
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="Price" Width="170px">
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="Quantity">
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="SomeDate">
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="Group1"  GroupIndex="0">
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="Group2" GroupIndex="1">
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="Discontinued">
        </DxGridDataColumn>
    </Columns>
    <GroupSummary>
        <DxGridSummaryItem
            SummaryType="GridSummaryItemType.Sum"
            DisplayText="{0}"
            FieldName="Price"
            FooterColumnName="Price"
            ValueDisplayFormat="n2"/>
        <DxGridSummaryItem
            SummaryType="GridSummaryItemType.Sum"
            DisplayText="{0}"
            FieldName="Quantity"
            FooterColumnName="Quantity"
            ValueDisplayFormat="n2"/>
    </GroupSummary>
    <DataColumnGroupRowTemplate>
        <GroupRowContent Context="context"></GroupRowContent>
    </DataColumnGroupRowTemplate>
</DxGrid>

@code {
    private List<Order> orders;

    protected override async Task OnInitializedAsync()
    {
        orders = await orderService.GetOrdersAsync();
    }
    
    async Task OnLayoutAutoSaving(GridPersistentLayoutEventArgs e)
    {
        stateService.GridLayoutChanged = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("InitializeSummaryTable", ".myGrid");
    }
}